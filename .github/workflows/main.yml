name: Create full Release

on:
  push:
    branches:
      - main
env:
  NAMESPACE: tester ###  the namespace where you want to deploy the test environment

jobs: ##
  calculate_new_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched
#
      - name: Calculate new tag
        id: set_tag
        run: |
          # List all tags for debugging
          echo "All tags in repository:"
          git tag -l
          
          # Try to get the last tag, with fallback to 1.0.0 if none exists
          LAST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "1.0.0")
          echo "Last tag found: $LAST_TAG"
          
          # Parse the version components with validation
          if [[ $LAST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Warning: Tag format not recognized, defaulting to 1.0.0"
            MAJOR=1
            MINOR=0
            PATCH=0
          fi
          
          # Calculate new version
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEXT_PATCH"
          echo "New tag will be: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

  tag_the_commit:
    needs: calculate_new_tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG=${{ needs.calculate_new_tag.outputs.tag }}
          echo "Checking if tag $TAG already exists"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist"
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create and push tag manually
        if: steps.check_tag.outputs.TAG_EXISTS != 'true'
        run: |
          TAG=${{ needs.calculate_new_tag.outputs.tag }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Creating tag $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "Tag $TAG created and pushed successfully"
      
      - name: Tag already exists
        if: steps.check_tag.outputs.TAG_EXISTS == 'true'
        run: echo "Tag ${{ needs.calculate_new_tag.outputs.tag }} already exists, skipping tag creation"

  build_and_push_image:
    needs: calculate_new_tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched
        
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: harbor.getapp.sh
          username: "${{ secrets.REGISTRY_USERNAME }}"
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          # path to the Dockerfile
          file: Dockerfile
          context: .
          tags: ${{ secrets.REGISTRY_URL }}/getapp-dev/tester:${{ needs.calculate_new_tag.outputs.tag }}
          push: true
          build-args: api_version_tag=${{ needs.calculate_new_tag.outputs.tag }}



  deploy_on_AKS:
    needs: 
      - build_and_push_image
      - calculate_new_tag
      - tag_the_commit
    name: Deploy on AKS 
    env:
      RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main        
          fetch-depth: 0 # Important for getting all tags and history
                
      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # Test the connection
          kubectl cluster-info

      - name: Verify image tag
        env:
          RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}
        run: |
          echo "Deploying with image tag: $RELEASE_TAG"
          # Check if the image with this tag exists in the registry
          if ! docker pull ${{ secrets.REGISTRY_URL }}/getapp-dev/tester:$RELEASE_TAG; then
            echo "::warning::Image with tag $RELEASE_TAG not found in registry. Using latest as fallback."
            echo "RELEASE_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Deploy to kubernetes 
        env:
          RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}
          NAMESPACE: tester
        run: |
          echo "Using release tag: $RELEASE_TAG for deployment"
          
          # Debug Helm chart structure
          echo "Helm chart structure:"
          find ./k8s/helm/$NAMESPACE -type f | sort
          
          # Deploy with Helm
          helm upgrade --install $NAMESPACE ./k8s/helm/$NAMESPACE \
            --namespace $NAMESPACE \
            --create-namespace \
            --set image.tag=$RELEASE_TAG \
            --debug
          
          # Verify deployment
          echo "Verifying deployment..."
          kubectl rollout status deployment/$NAMESPACE -n $NAMESPACE --timeout=60s
          echo "Deployment verified!"

        
